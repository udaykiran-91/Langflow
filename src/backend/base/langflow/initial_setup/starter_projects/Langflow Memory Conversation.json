{
  "data": {
    "edges": [
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text",
              "object"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-cdA1J"
          },
          "targetHandle": {
            "fieldName": "context",
            "id": "Prompt-ODkUx",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-MemoryComponent-cdA1J{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-cdA1Jœ}-Prompt-ODkUx{œfieldNameœ:œcontextœ,œidœ:œPrompt-ODkUxœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "MemoryComponent-cdA1J",
        "sourceHandle": "{œbaseClassesœ: [œstrœ, œTextœ, œobjectœ], œdataTypeœ: œMemoryComponentœ, œidœ: œMemoryComponent-cdA1Jœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-ODkUx",
        "targetHandle": "{œfieldNameœ: œcontextœ, œidœ: œPrompt-ODkUxœ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-t7F8v"
          },
          "targetHandle": {
            "fieldName": "user_message",
            "id": "Prompt-ODkUx",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-t7F8v{œbaseClassesœ:[œTextœ,œobjectœ,œRecordœ,œstrœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-t7F8vœ}-Prompt-ODkUx{œfieldNameœ:œuser_messageœ,œidœ:œPrompt-ODkUxœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-t7F8v",
        "sourceHandle": "{œbaseClassesœ: [œTextœ, œobjectœ, œRecordœ, œstrœ], œdataTypeœ: œChatInputœ, œidœ: œChatInput-t7F8vœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-ODkUx",
        "targetHandle": "{œfieldNameœ: œuser_messageœ, œidœ: œPrompt-ODkUxœ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "str",
              "object"
            ],
            "dataType": "Prompt",
            "id": "Prompt-ODkUx"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-9RykF",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-ODkUx{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-ODkUxœ}-OpenAIModel-9RykF{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-9RykFœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "source": "Prompt-ODkUx",
        "sourceHandle": "{œbaseClassesœ: [œTextœ, œstrœ, œobjectœ], œdataTypeœ: œPromptœ, œidœ: œPrompt-ODkUxœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "OpenAIModel-9RykF",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œOpenAIModel-9RykFœ, œinputTypesœ: [œTextœ, œRecordœ, œPromptœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "str",
              "object",
              "Text"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-9RykF"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-P1jEe",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-9RykF{œbaseClassesœ:[œstrœ,œobjectœ,œTextœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-9RykFœ}-ChatOutput-P1jEe{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-P1jEeœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "source": "OpenAIModel-9RykF",
        "sourceHandle": "{œbaseClassesœ: [œstrœ, œobjectœ, œTextœ], œdataTypeœ: œOpenAIModelœ, œidœ: œOpenAIModel-9RykFœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "ChatOutput-P1jEe",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-P1jEeœ, œinputTypesœ: [œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-foreground stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "str",
              "Text",
              "object"
            ],
            "dataType": "MemoryComponent",
            "id": "MemoryComponent-cdA1J"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-vrs6T",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-MemoryComponent-cdA1J{œbaseClassesœ:[œstrœ,œTextœ,œobjectœ],œdataTypeœ:œMemoryComponentœ,œidœ:œMemoryComponent-cdA1Jœ}-TextOutput-vrs6T{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-vrs6Tœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "source": "MemoryComponent-cdA1J",
        "sourceHandle": "{œbaseClassesœ: [œstrœ, œTextœ, œobjectœ], œdataTypeœ: œMemoryComponentœ, œidœ: œMemoryComponent-cdA1Jœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "TextOutput-vrs6T",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œTextOutput-vrs6Tœ, œinputTypesœ: [œRecordœ, œTextœ], œtypeœ: œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-t7F8v",
          "node": {
            "base_classes": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatInput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "MySessionID"
              }
            }
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 469,
        "id": "ChatInput-t7F8v",
        "position": {
          "x": 1283.2700598313072,
          "y": 982.5953650473145
        },
        "positionAbsolute": {
          "x": 1283.2700598313072,
          "y": 982.5953650473145
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "ChatOutput-P1jEe",
          "node": {
            "base_classes": [
              "Text",
              "object",
              "Record",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "MySessionID"
              }
            }
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 477,
        "id": "ChatOutput-P1jEe",
        "position": {
          "x": 3154.916355514023,
          "y": 851.051882666333
        },
        "positionAbsolute": {
          "x": 3154.916355514023,
          "y": 851.051882666333
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Retrieves stored chat messages given a specific Session ID.",
          "display_name": "Chat Memory",
          "id": "MemoryComponent-cdA1J",
          "node": {
            "base_classes": [
              "str",
              "Text",
              "object"
            ],
            "beta": true,
            "custom_fields": {
              "n_messages": null,
              "order": null,
              "record_template": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Retrieves stored chat messages given a specific Session ID.",
            "display_name": "Chat Memory",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "history",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langflow.base.memory.memory import BaseMemoryComponent\nfrom langflow.field_typing import Text\nfrom langflow.helpers.record import messages_to_text\nfrom langflow.memory import get_messages\nfrom langflow.schema.message import Message\n\n\nclass MemoryComponent(BaseMemoryComponent):\n    display_name = \"Chat Memory\"\n    description = \"Retrieves stored chat messages given a specific Session ID.\"\n    beta: bool = True\n    icon = \"history\"\n\n    def build_config(self):\n        return {\n            \"sender\": {\n                \"options\": [\"Machine\", \"User\", \"Machine and User\"],\n                \"display_name\": \"Sender Type\",\n            },\n            \"sender_name\": {\"display_name\": \"Sender Name\", \"advanced\": True},\n            \"n_messages\": {\n                \"display_name\": \"Number of Messages\",\n                \"info\": \"Number of messages to retrieve.\",\n            },\n            \"session_id\": {\n                \"display_name\": \"Session ID\",\n                \"info\": \"Session ID of the chat history.\",\n                \"input_types\": [\"Text\"],\n            },\n            \"order\": {\n                \"options\": [\"Ascending\", \"Descending\"],\n                \"display_name\": \"Order\",\n                \"info\": \"Order of the messages.\",\n                \"advanced\": True,\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def get_messages(self, **kwargs) -> list[Message]:\n        # Validate kwargs by checking if it contains the correct keys\n        if \"sender\" not in kwargs:\n            kwargs[\"sender\"] = None\n        if \"sender_name\" not in kwargs:\n            kwargs[\"sender_name\"] = None\n        if \"session_id\" not in kwargs:\n            kwargs[\"session_id\"] = None\n        if \"limit\" not in kwargs:\n            kwargs[\"limit\"] = 5\n        if \"order\" not in kwargs:\n            kwargs[\"order\"] = \"Descending\"\n\n        kwargs[\"order\"] = \"DESC\" if kwargs[\"order\"] == \"Descending\" else \"ASC\"\n        if kwargs[\"sender\"] == \"Machine and User\":\n            kwargs[\"sender\"] = None\n        return get_messages(**kwargs)\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine and User\",\n        sender_name: Optional[str] = None,\n        session_id: Optional[str] = None,\n        n_messages: int = 5,\n        order: Optional[str] = \"Descending\",\n        record_template: Optional[str] = \"{sender_name}: {text}\",\n    ) -> Text:\n        messages = self.get_messages(\n            sender=sender,\n            sender_name=sender_name,\n            session_id=session_id,\n            limit=n_messages,\n            order=order,\n        )\n        messages_str = messages_to_text(template=record_template or \"\", messages=messages)\n        self.status = messages_str\n        return messages_str\n"
              },
              "n_messages": {
                "advanced": false,
                "display_name": "Number of Messages",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Number of messages to retrieve.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "n_messages",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 5
              },
              "order": {
                "advanced": true,
                "display_name": "Order",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Order of the messages.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Descending"
              },
              "record_template": {
                "advanced": true,
                "display_name": "Record Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "record_template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "sender": {
                "advanced": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "session_id": {
                "advanced": false,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Session ID of the chat history.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "MySessionID"
              }
            }
          },
          "type": "MemoryComponent"
        },
        "dragging": false,
        "height": 489,
        "id": "MemoryComponent-cdA1J",
        "position": {
          "x": 1289.9606870058817,
          "y": 442.16804561053766
        },
        "positionAbsolute": {
          "x": 1289.9606870058817,
          "y": 442.16804561053766
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "A component for creating prompt templates using dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-ODkUx",
          "node": {
            "base_classes": [
              "Text",
              "str",
              "object"
            ],
            "beta": false,
            "custom_fields": {
              "template": [
                "context",
                "user_message"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "error": null,
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "name": "",
            "output_types": [
              "Prompt"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import CustomComponent\nfrom langflow.field_typing import TemplateField\nfrom langflow.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
              },
              "context": {
                "advanced": false,
                "display_name": "context",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "context",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "prompt",
                "value": "{context}\n\nUser: {user_message}\nAI: "
              },
              "user_message": {
                "advanced": false,
                "display_name": "user_message",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "user_message",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 477,
        "id": "Prompt-ODkUx",
        "position": {
          "x": 1894.594426342426,
          "y": 753.3797365481901
        },
        "positionAbsolute": {
          "x": 1894.594426342426,
          "y": 753.3797365481901
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIModel-9RykF",
          "node": {
            "base_classes": [
              "str",
              "object",
              "Text"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "stream": null,
              "system_message": null,
              "temperature": null
            },
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "max_tokens": {
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_tokens",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 256
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "model_name": {
                "advanced": false,
                "display_name": "Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model_name",
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "gpt-4-1106-preview"
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "stream": {
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "stream",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "advanced": true,
                "display_name": "System Message",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "System message to pass to the model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "system_message",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "temperature",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float",
                "value": "0.2"
              }
            }
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 563,
        "id": "OpenAIModel-9RykF",
        "position": {
          "x": 2561.5850334731617,
          "y": 553.2745131130916
        },
        "positionAbsolute": {
          "x": 2561.5850334731617,
          "y": 553.2745131130916
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "TextOutput-vrs6T",
          "node": {
            "base_classes": [
              "str",
              "object",
              "Text"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "description": "Display a text output in the Playground.",
            "display_name": "Inspect Memory",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "type",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: str = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Value",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Text or Record to be passed as output.",
                "input_types": [
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "record_template": {
                "advanced": true,
                "display_name": "Record Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "record_template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "TextOutput"
        },
        "dragging": false,
        "height": 289,
        "id": "TextOutput-vrs6T",
        "position": {
          "x": 1911.4785906252087,
          "y": 247.39079954376987
        },
        "positionAbsolute": {
          "x": 1911.4785906252087,
          "y": 247.39079954376987
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      }
    ],
    "viewport": {
      "x": -569.862554459756,
      "y": -42.08339711050985,
      "zoom": 0.4868590524514978
    }
  },
  "description": "This project can be used as a starting point for building a Chat experience with user specific memory. You can set a different Session ID to start a new message history.",
  "icon": "🤖",
  "icon_bg_color": "#FFD700",
  "id": "08d5cccf-d098-4367-b14b-1078429c9ed9",
  "is_component": false,
  "last_tested_version": "1.0.0a0",
  "name": "Memory Chatbot"
}