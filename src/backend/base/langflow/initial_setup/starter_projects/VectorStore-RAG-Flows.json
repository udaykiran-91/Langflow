{
  "data": {
    "edges": [
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Text",
              "str"
            ],
            "dataType": "TextOutput",
            "id": "TextOutput-BDknO"
          },
          "targetHandle": {
            "fieldName": "context",
            "id": "Prompt-xeI6K",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-TextOutput-BDknO{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œTextOutputœ,œidœ:œTextOutput-BDknOœ}-Prompt-xeI6K{œfieldNameœ:œcontextœ,œidœ:œPrompt-xeI6Kœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextOutput-BDknO",
        "sourceHandle": "{œbaseClassesœ: [œobjectœ, œTextœ, œstrœ], œdataTypeœ: œTextOutputœ, œidœ: œTextOutput-BDknOœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-xeI6K",
        "targetHandle": "{œfieldNameœ: œcontextœ, œidœ: œPrompt-xeI6Kœ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "str",
              "object",
              "Record"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-yxMKE"
          },
          "targetHandle": {
            "fieldName": "question",
            "id": "Prompt-xeI6K",
            "inputTypes": [
              "Document",
              "BaseOutputParser",
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-yxMKE{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-yxMKEœ}-Prompt-xeI6K{œfieldNameœ:œquestionœ,œidœ:œPrompt-xeI6Kœ,œinputTypesœ:[œDocumentœ,œBaseOutputParserœ,œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-yxMKE",
        "sourceHandle": "{œbaseClassesœ: [œTextœ, œstrœ, œobjectœ, œRecordœ], œdataTypeœ: œChatInputœ, œidœ: œChatInput-yxMKEœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "Prompt-xeI6K",
        "targetHandle": "{œfieldNameœ: œquestionœ, œidœ: œPrompt-xeI6Kœ, œinputTypesœ: [œDocumentœ, œBaseOutputParserœ, œRecordœ, œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Text",
              "str"
            ],
            "dataType": "Prompt",
            "id": "Prompt-xeI6K"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-EjXlN",
            "inputTypes": [
              "Text",
              "Record",
              "Prompt"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-xeI6K{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œPromptœ,œidœ:œPrompt-xeI6Kœ}-OpenAIModel-EjXlN{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-EjXlNœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-xeI6K",
        "sourceHandle": "{œbaseClassesœ: [œobjectœ, œTextœ, œstrœ], œdataTypeœ: œPromptœ, œidœ: œPrompt-xeI6Kœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "OpenAIModel-EjXlN",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œOpenAIModel-EjXlNœ, œinputTypesœ: [œTextœ, œRecordœ, œPromptœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "object",
              "Text",
              "str"
            ],
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-EjXlN"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Q39I8",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-EjXlN{œbaseClassesœ:[œobjectœ,œTextœ,œstrœ],œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-EjXlNœ}-ChatOutput-Q39I8{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Q39I8œ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-EjXlN",
        "sourceHandle": "{œbaseClassesœ: [œobjectœ, œTextœ, œstrœ], œdataTypeœ: œOpenAIModelœ, œidœ: œOpenAIModel-EjXlNœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "ChatOutput-Q39I8",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-Q39I8œ, œinputTypesœ: [œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "File",
            "id": "File-t0a6a"
          },
          "targetHandle": {
            "fieldName": "inputs",
            "id": "RecursiveCharacterTextSplitter-tR9QM",
            "inputTypes": [
              "Document",
              "Record"
            ],
            "type": "Document"
          }
        },
        "id": "reactflow__edge-File-t0a6a{œbaseClassesœ:[œRecordœ],œdataTypeœ:œFileœ,œidœ:œFile-t0a6aœ}-RecursiveCharacterTextSplitter-tR9QM{œfieldNameœ:œinputsœ,œidœ:œRecursiveCharacterTextSplitter-tR9QMœ,œinputTypesœ:[œDocumentœ,œRecordœ],œtypeœ:œDocumentœ}",
        "selected": false,
        "source": "File-t0a6a",
        "sourceHandle": "{œbaseClassesœ: [œRecordœ], œdataTypeœ: œFileœ, œidœ: œFile-t0a6aœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "RecursiveCharacterTextSplitter-tR9QM",
        "targetHandle": "{œfieldNameœ: œinputsœ, œidœ: œRecursiveCharacterTextSplitter-tR9QMœ, œinputTypesœ: [œDocumentœ, œRecordœ], œtypeœ: œDocumentœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-ZlOk1"
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "AstraDBSearch-41nRz",
            "inputTypes": null,
            "type": "Embeddings"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-ZlOk1{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-ZlOk1œ}-AstraDBSearch-41nRz{œfieldNameœ:œembeddingœ,œidœ:œAstraDBSearch-41nRzœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "source": "OpenAIEmbeddings-ZlOk1",
        "sourceHandle": "{œbaseClassesœ: [œEmbeddingsœ], œdataTypeœ: œOpenAIEmbeddingsœ, œidœ: œOpenAIEmbeddings-ZlOk1œ}",
        "style": {
          "stroke": "#555"
        },
        "target": "AstraDBSearch-41nRz",
        "targetHandle": "{œfieldNameœ: œembeddingœ, œidœ: œAstraDBSearch-41nRzœ, œinputTypesœ: null, œtypeœ: œEmbeddingsœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Text",
              "str",
              "object",
              "Record"
            ],
            "dataType": "ChatInput",
            "id": "ChatInput-yxMKE"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "AstraDBSearch-41nRz",
            "inputTypes": [
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-yxMKE{œbaseClassesœ:[œTextœ,œstrœ,œobjectœ,œRecordœ],œdataTypeœ:œChatInputœ,œidœ:œChatInput-yxMKEœ}-AstraDBSearch-41nRz{œfieldNameœ:œinput_valueœ,œidœ:œAstraDBSearch-41nRzœ,œinputTypesœ:[œTextœ],œtypeœ:œstrœ}",
        "source": "ChatInput-yxMKE",
        "sourceHandle": "{œbaseClassesœ: [œTextœ, œstrœ, œobjectœ, œRecordœ], œdataTypeœ: œChatInputœ, œidœ: œChatInput-yxMKEœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "AstraDBSearch-41nRz",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œAstraDBSearch-41nRzœ, œinputTypesœ: [œTextœ], œtypeœ: œstrœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "RecursiveCharacterTextSplitter",
            "id": "RecursiveCharacterTextSplitter-tR9QM"
          },
          "targetHandle": {
            "fieldName": "inputs",
            "id": "AstraDB-eUCSS",
            "inputTypes": null,
            "type": "Record"
          }
        },
        "id": "reactflow__edge-RecursiveCharacterTextSplitter-tR9QM{œbaseClassesœ:[œRecordœ],œdataTypeœ:œRecursiveCharacterTextSplitterœ,œidœ:œRecursiveCharacterTextSplitter-tR9QMœ}-AstraDB-eUCSS{œfieldNameœ:œinputsœ,œidœ:œAstraDB-eUCSSœ,œinputTypesœ:null,œtypeœ:œRecordœ}",
        "selected": false,
        "source": "RecursiveCharacterTextSplitter-tR9QM",
        "sourceHandle": "{œbaseClassesœ: [œRecordœ], œdataTypeœ: œRecursiveCharacterTextSplitterœ, œidœ: œRecursiveCharacterTextSplitter-tR9QMœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "AstraDB-eUCSS",
        "targetHandle": "{œfieldNameœ: œinputsœ, œidœ: œAstraDB-eUCSSœ, œinputTypesœ: null, œtypeœ: œRecordœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Embeddings"
            ],
            "dataType": "OpenAIEmbeddings",
            "id": "OpenAIEmbeddings-9TPjc"
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "AstraDB-eUCSS",
            "inputTypes": null,
            "type": "Embeddings"
          }
        },
        "id": "reactflow__edge-OpenAIEmbeddings-9TPjc{œbaseClassesœ:[œEmbeddingsœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-9TPjcœ}-AstraDB-eUCSS{œfieldNameœ:œembeddingœ,œidœ:œAstraDB-eUCSSœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}",
        "selected": false,
        "source": "OpenAIEmbeddings-9TPjc",
        "sourceHandle": "{œbaseClassesœ: [œEmbeddingsœ], œdataTypeœ: œOpenAIEmbeddingsœ, œidœ: œOpenAIEmbeddings-9TPjcœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "AstraDB-eUCSS",
        "targetHandle": "{œfieldNameœ: œembeddingœ, œidœ: œAstraDB-eUCSSœ, œinputTypesœ: null, œtypeœ: œEmbeddingsœ}"
      },
      {
        "className": "stroke-gray-900 stroke-connection",
        "data": {
          "sourceHandle": {
            "baseClasses": [
              "Record"
            ],
            "dataType": "AstraDBSearch",
            "id": "AstraDBSearch-41nRz"
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-BDknO",
            "inputTypes": [
              "Record",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-AstraDBSearch-41nRz{œbaseClassesœ:[œRecordœ],œdataTypeœ:œAstraDBSearchœ,œidœ:œAstraDBSearch-41nRzœ}-TextOutput-BDknO{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-BDknOœ,œinputTypesœ:[œRecordœ,œTextœ],œtypeœ:œstrœ}",
        "source": "AstraDBSearch-41nRz",
        "sourceHandle": "{œbaseClassesœ: [œRecordœ], œdataTypeœ: œAstraDBSearchœ, œidœ: œAstraDBSearch-41nRzœ}",
        "style": {
          "stroke": "#555"
        },
        "target": "TextOutput-BDknO",
        "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œTextOutput-BDknOœ, œinputTypesœ: [œRecordœ, œTextœ], œtypeœ: œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-yxMKE",
          "node": {
            "base_classes": [
              "Text",
              "str",
              "object",
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatInput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.schema.message import Message\nfrom langflow.field_typing import Text\nfrom typing import Union\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n\n    def build_config(self):\n        build_config = super().build_config()\n        build_config[\"input_value\"] = {\n            \"input_types\": [],\n            \"display_name\": \"Text\",\n            \"multiline\": True,\n        }\n\n        return build_config\n\n    def build(\n        self,\n        sender: Optional[str] = \"User\",\n        sender_name: Optional[str] = \"User\",\n        input_value: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        session_id: Optional[str] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            files=files,\n            session_id=session_id,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "what is a line"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "ChatInput"
        },
        "height": 383,
        "id": "ChatInput-yxMKE",
        "position": {
          "x": 1195.5276981160775,
          "y": 209.421875
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "TextOutput-BDknO",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "record_template": null
            },
            "description": "Display a text output in the Playground.",
            "display_name": "Extracted Chunks",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "type",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextOutput(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as output.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(self, input_value: Optional[Text] = \"\", record_template: str = \"\") -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Value",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Text or Record to be passed as output.",
                "input_types": [
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "record_template": {
                "advanced": true,
                "display_name": "Record Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "record_template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "{text}"
              }
            }
          },
          "type": "TextOutput"
        },
        "dragging": false,
        "height": 289,
        "id": "TextOutput-BDknO",
        "position": {
          "x": 2322.600672827879,
          "y": 604.9467307442569
        },
        "positionAbsolute": {
          "x": 2322.600672827879,
          "y": 604.9467307442569
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIEmbeddings-ZlOk1",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "custom_fields": {
              "allowed_special": null,
              "chunk_size": null,
              "client": null,
              "default_headers": null,
              "default_query": null,
              "deployment": null,
              "disallowed_special": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "description": "Generate embeddings using OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Embeddings"
            ],
            "template": {
              "_type": "CustomComponent",
              "allowed_special": {
                "advanced": true,
                "display_name": "Allowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "allowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": []
              },
              "chunk_size": {
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.custom import CustomComponent\nfrom langflow.field_typing import Embeddings, NestedDict\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n"
              },
              "default_headers": {
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_headers",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "default_query": {
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_query",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "deployment": {
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "deployment",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "disallowed_special": {
                "advanced": true,
                "display_name": "Disallowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "disallowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  "all"
                ]
              },
              "embedding_ctx_length": {
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding_ctx_length",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 8191
              },
              "max_retries": {
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_retries",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 6
              },
              "model": {
                "advanced": false,
                "display_name": "Model",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "openai_api_type": {
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_type",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_version": {
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_version",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_organization": {
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_organization",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_proxy": {
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_proxy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "request_timeout": {
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "request_timeout",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float"
              },
              "show_progress_bar": {
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "show_progress_bar",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "skip_empty",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "tiktoken_enable": {
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_enable",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": true
              },
              "tiktoken_model_name": {
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_model_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "OpenAIEmbeddings"
        },
        "dragging": false,
        "height": 383,
        "id": "OpenAIEmbeddings-ZlOk1",
        "position": {
          "x": 1183.667250865064,
          "y": 687.3171828430261
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIModel-EjXlN",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "max_tokens": null,
              "model_kwargs": null,
              "model_name": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "stream": null,
              "system_message": null,
              "temperature": null
            },
            "description": "Generates text using OpenAI LLMs.",
            "display_name": "OpenAI",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "max_tokens",
              "model_kwargs",
              "model_name",
              "openai_api_base",
              "openai_api_key",
              "temperature",
              "input_value",
              "system_message",
              "stream"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "output_types": [
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\", \"input_types\": [\"Text\", \"Record\", \"Prompt\"]},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float = 0.1,\n        model_name: str = \"gpt-3.5-turbo\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text",
                  "Record",
                  "Prompt"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "max_tokens": {
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_tokens",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 256
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "model_name": {
                "advanced": false,
                "display_name": "Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model_name",
                "options": [
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "gpt-3.5-turbo"
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "stream": {
                "advanced": true,
                "display_name": "Stream",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "stream",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "system_message": {
                "advanced": true,
                "display_name": "System Message",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "System message to pass to the model.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "system_message",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "temperature": {
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "temperature",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float",
                "value": 0.1
              }
            }
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 563,
        "id": "OpenAIModel-EjXlN",
        "position": {
          "x": 3410.117202077183,
          "y": 431.2038048137648
        },
        "positionAbsolute": {
          "x": 3410.117202077183,
          "y": 431.2038048137648
        },
        "selected": true,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "description": "Create a prompt template with dynamic variables.",
          "display_name": "Prompt",
          "id": "Prompt-xeI6K",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "template": [
                "context",
                "question"
              ]
            },
            "description": "Create a prompt template with dynamic variables.",
            "display_name": "Prompt",
            "documentation": "",
            "error": null,
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "full_path": null,
            "icon": "prompts",
            "is_composition": null,
            "is_input": null,
            "is_output": null,
            "name": "",
            "output_types": [
              "Prompt"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import CustomComponent\nfrom langflow.field_typing import TemplateField\nfrom langflow.field_typing.prompt import Prompt\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    async def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Prompt:\n        prompt = await Prompt.from_template_and_variables(template, kwargs)\n        self.status = prompt.format_text()\n        return prompt\n"
              },
              "context": {
                "advanced": false,
                "display_name": "context",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "context",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "question": {
                "advanced": false,
                "display_name": "question",
                "dynamic": false,
                "field_type": "str",
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Document",
                  "BaseOutputParser",
                  "Record",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "question",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "template",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "prompt",
                "value": "{context}\n\n---\n\nGiven the context above, answer the question as best as possible.\n\nQuestion: {question}\n\nAnswer: "
              }
            }
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 477,
        "id": "Prompt-xeI6K",
        "position": {
          "x": 2969.0261961391298,
          "y": 442.1613649809069
        },
        "positionAbsolute": {
          "x": 2969.0261961391298,
          "y": 442.1613649809069
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "ChatOutput-Q39I8",
          "node": {
            "base_classes": [
              "object",
              "Text",
              "Record",
              "str"
            ],
            "beta": false,
            "custom_fields": {
              "input_value": null,
              "record_template": null,
              "return_record": null,
              "sender": null,
              "sender_name": null,
              "session_id": null
            },
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "ChatOutput",
            "output_types": [
              "Message",
              "Text"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        files: Optional[list[str]] = None,\n        return_message: Optional[bool] = False,\n    ) -> Union[Message, Text]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            files=files,\n            return_message=return_message,\n        )\n"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "advanced": false,
                "display_name": "Sender Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "sender_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If provided, the message will be stored in the memory.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "session_id",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 383,
        "id": "ChatOutput-Q39I8",
        "position": {
          "x": 3887.2073667611485,
          "y": 588.4801225794856
        },
        "positionAbsolute": {
          "x": 3887.2073667611485,
          "y": 588.4801225794856
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "File-t0a6a",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "path": null,
              "silent_errors": null
            },
            "description": "A generic file loader.",
            "display_name": "File",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "icon": "file-text",
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pathlib import Path\nfrom typing import Any, Dict\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_record\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\n\n\nclass FileComponent(CustomComponent):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"path\": {\n                \"display_name\": \"Path\",\n                \"field_type\": \"file\",\n                \"file_types\": TEXT_FILE_TYPES,\n                \"info\": f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n            },\n            \"silent_errors\": {\n                \"display_name\": \"Silent Errors\",\n                \"advanced\": True,\n                \"info\": \"If true, errors will not raise an exception.\",\n            },\n        }\n\n    def load_file(self, path: str, silent_errors: bool = False) -> Record:\n        resolved_path = self.resolve_path(path)\n        path_obj = Path(resolved_path)\n        extension = path_obj.suffix[1:].lower()\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n        record = parse_text_file_to_record(resolved_path, silent_errors)\n        self.status = record if record else \"No data\"\n        return record or Record()\n\n    def build(\n        self,\n        path: str,\n        silent_errors: bool = False,\n    ) -> Record:\n        record = self.load_file(path, silent_errors)\n        self.status = record\n        return record\n"
              },
              "path": {
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "fileTypes": [
                  ".txt",
                  ".md",
                  ".mdx",
                  ".csv",
                  ".json",
                  ".yaml",
                  ".yml",
                  ".xml",
                  ".html",
                  ".htm",
                  ".pdf",
                  ".docx",
                  ".py",
                  ".sh",
                  ".sql",
                  ".js",
                  ".ts",
                  ".tsx"
                ],
                "file_path": "51e2b78a-199b-4054-9f32-e288eef6924c/Langflow conversation.pdf",
                "info": "Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "path",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "file",
                "value": ""
              },
              "silent_errors": {
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "silent_errors",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              }
            }
          },
          "type": "File"
        },
        "dragging": false,
        "height": 281,
        "id": "File-t0a6a",
        "position": {
          "x": 2257.233450682836,
          "y": 1747.5389618367233
        },
        "positionAbsolute": {
          "x": 2257.233450682836,
          "y": 1747.5389618367233
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "RecursiveCharacterTextSplitter-tR9QM",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "chunk_overlap": null,
              "chunk_size": null,
              "inputs": null,
              "separators": null
            },
            "description": "Split text into chunks of a specified length.",
            "display_name": "Recursive Character Text Splitter",
            "documentation": "https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "chunk_overlap": {
                "advanced": false,
                "display_name": "Chunk Overlap",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The amount of overlap between chunks.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_overlap",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 200
              },
              "chunk_size": {
                "advanced": false,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The maximum length of each chunk.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Optional\n\nfrom langchain_core.documents import Document\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\n\nfrom langflow.custom import CustomComponent\nfrom langflow.schema import Record\nfrom langflow.utils.util import build_loader_repr_from_records, unescape_string\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Input\",\n                \"info\": \"The texts to split.\",\n                \"input_types\": [\"Document\", \"Record\"],\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        inputs: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Record]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [unescape_string(x) for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n        documents = []\n        for _input in inputs:\n            if isinstance(_input, Record):\n                documents.append(_input.to_lc_document())\n            else:\n                documents.append(_input)\n        docs = splitter.split_documents(documents)\n        records = self.to_records(docs)\n        self.repr_value = build_loader_repr_from_records(records)\n        return records\n"
              },
              "inputs": {
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The texts to split.",
                "input_types": [
                  "Document",
                  "Record"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "inputs",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Document"
              },
              "separators": {
                "advanced": false,
                "display_name": "Separators",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "separators",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  ""
                ]
              }
            }
          },
          "type": "RecursiveCharacterTextSplitter"
        },
        "dragging": false,
        "height": 501,
        "id": "RecursiveCharacterTextSplitter-tR9QM",
        "position": {
          "x": 2791.013514133929,
          "y": 1462.9588953494142
        },
        "positionAbsolute": {
          "x": 2791.013514133929,
          "y": 1462.9588953494142
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "AstraDBSearch-41nRz",
          "node": {
            "base_classes": [
              "Record"
            ],
            "beta": false,
            "custom_fields": {
              "api_endpoint": null,
              "batch_size": null,
              "bulk_delete_concurrency": null,
              "bulk_insert_batch_concurrency": null,
              "bulk_insert_overwrite_concurrency": null,
              "collection_indexing_policy": null,
              "collection_name": null,
              "embedding": null,
              "input_value": null,
              "metadata_indexing_exclude": null,
              "metadata_indexing_include": null,
              "metric": null,
              "namespace": null,
              "number_of_results": null,
              "pre_delete_collection": null,
              "search_type": null,
              "setup_mode": null,
              "token": null
            },
            "description": "Searches an existing Astra DB Vector Store.",
            "display_name": "Astra DB Search",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "input_value",
              "embedding"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "output_types": [
              "Record"
            ],
            "template": {
              "_type": "CustomComponent",
              "api_endpoint": {
                "advanced": false,
                "display_name": "API Endpoint",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "API endpoint URL for the Astra DB service.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "api_endpoint",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "ASTRA_DB_API_ENDPOINT"
              },
              "batch_size": {
                "advanced": true,
                "display_name": "Batch Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional number of records to process in a single batch.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "batch_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_delete_concurrency": {
                "advanced": true,
                "display_name": "Bulk Delete Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk delete operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_delete_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_batch_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Batch Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_batch_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_overwrite_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Overwrite Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations that overwrite existing records.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_overwrite_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List, Optional\n\nfrom langflow.components.vectorstores.AstraDB import AstraDBVectorStoreComponent\nfrom langflow.components.vectorstores.base.model import LCVectorStoreComponent\nfrom langflow.field_typing import Embeddings, Text\nfrom langflow.schema import Record\n\n\nclass AstraDBSearchComponent(LCVectorStoreComponent):\n    display_name = \"Astra DB Search\"\n    description = \"Searches an existing Astra DB Vector Store.\"\n    icon = \"AstraDB\"\n    field_order = [\"token\", \"api_endpoint\", \"collection_name\", \"input_value\", \"embedding\"]\n\n    def build_config(self):\n        return {\n            \"search_type\": {\n                \"display_name\": \"Search Type\",\n                \"options\": [\"Similarity\", \"MMR\"],\n            },\n            \"input_value\": {\n                \"display_name\": \"Input Value\",\n                \"info\": \"Input value to search\",\n            },\n            \"embedding\": {\"display_name\": \"Embedding\", \"info\": \"Embedding to use\"},\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"info\": \"The name of the collection within Astra DB where the vectors will be stored.\",\n            },\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"info\": \"Authentication token for accessing Astra DB.\",\n                \"password\": True,\n            },\n            \"api_endpoint\": {\n                \"display_name\": \"API Endpoint\",\n                \"info\": \"API endpoint URL for the Astra DB service.\",\n            },\n            \"namespace\": {\n                \"display_name\": \"Namespace\",\n                \"info\": \"Optional namespace within Astra DB to use for the collection.\",\n                \"advanced\": True,\n            },\n            \"metric\": {\n                \"display_name\": \"Metric\",\n                \"info\": \"Optional distance metric for vector comparisons in the vector store.\",\n                \"advanced\": True,\n            },\n            \"batch_size\": {\n                \"display_name\": \"Batch Size\",\n                \"info\": \"Optional number of records to process in a single batch.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_batch_concurrency\": {\n                \"display_name\": \"Bulk Insert Batch Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_overwrite_concurrency\": {\n                \"display_name\": \"Bulk Insert Overwrite Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations that overwrite existing records.\",\n                \"advanced\": True,\n            },\n            \"bulk_delete_concurrency\": {\n                \"display_name\": \"Bulk Delete Concurrency\",\n                \"info\": \"Optional concurrency level for bulk delete operations.\",\n                \"advanced\": True,\n            },\n            \"setup_mode\": {\n                \"display_name\": \"Setup Mode\",\n                \"info\": \"Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.\",\n                \"options\": [\"Sync\", \"Async\", \"Off\"],\n                \"advanced\": True,\n            },\n            \"pre_delete_collection\": {\n                \"display_name\": \"Pre Delete Collection\",\n                \"info\": \"Boolean flag to determine whether to delete the collection before creating a new one.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_include\": {\n                \"display_name\": \"Metadata Indexing Include\",\n                \"info\": \"Optional list of metadata fields to include in the indexing.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_exclude\": {\n                \"display_name\": \"Metadata Indexing Exclude\",\n                \"info\": \"Optional list of metadata fields to exclude from the indexing.\",\n                \"advanced\": True,\n            },\n            \"collection_indexing_policy\": {\n                \"display_name\": \"Collection Indexing Policy\",\n                \"info\": \"Optional dictionary defining the indexing policy for the collection.\",\n                \"advanced\": True,\n            },\n            \"number_of_results\": {\n                \"display_name\": \"Number of Results\",\n                \"info\": \"Number of results to return.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        collection_name: str,\n        input_value: Text,\n        token: str,\n        api_endpoint: str,\n        search_type: str = \"Similarity\",\n        number_of_results: int = 4,\n        namespace: Optional[str] = None,\n        metric: Optional[str] = None,\n        batch_size: Optional[int] = None,\n        bulk_insert_batch_concurrency: Optional[int] = None,\n        bulk_insert_overwrite_concurrency: Optional[int] = None,\n        bulk_delete_concurrency: Optional[int] = None,\n        setup_mode: str = \"Sync\",\n        pre_delete_collection: bool = False,\n        metadata_indexing_include: Optional[List[str]] = None,\n        metadata_indexing_exclude: Optional[List[str]] = None,\n        collection_indexing_policy: Optional[dict] = None,\n    ) -> List[Record]:\n        vector_store = AstraDBVectorStoreComponent().build(\n            embedding=embedding,\n            collection_name=collection_name,\n            token=token,\n            api_endpoint=api_endpoint,\n            namespace=namespace,\n            metric=metric,\n            batch_size=batch_size,\n            bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n            bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n            bulk_delete_concurrency=bulk_delete_concurrency,\n            setup_mode=setup_mode,\n            pre_delete_collection=pre_delete_collection,\n            metadata_indexing_include=metadata_indexing_include,\n            metadata_indexing_exclude=metadata_indexing_exclude,\n            collection_indexing_policy=collection_indexing_policy,\n        )\n        try:\n            return self.search_with_vector_store(input_value, search_type, vector_store, k=number_of_results)\n        except KeyError as e:\n            if \"content\" in str(e):\n                raise ValueError(\n                    \"You should ingest data through Langflow (or LangChain) to query it in Langflow. Your collection does not contain a field name 'content'.\"\n                )\n            else:\n                raise e\n"
              },
              "collection_indexing_policy": {
                "advanced": true,
                "display_name": "Collection Indexing Policy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional dictionary defining the indexing policy for the collection.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_indexing_policy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "collection_name": {
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_name",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "langflow"
              },
              "embedding": {
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Embedding to use",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Embeddings"
              },
              "input_value": {
                "advanced": false,
                "display_name": "Input Value",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Input value to search",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "input_value",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metadata_indexing_exclude": {
                "advanced": true,
                "display_name": "Metadata Indexing Exclude",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to exclude from the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_exclude",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metadata_indexing_include": {
                "advanced": true,
                "display_name": "Metadata Indexing Include",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to include in the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_include",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metric": {
                "advanced": true,
                "display_name": "Metric",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional distance metric for vector comparisons in the vector store.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "metric",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "namespace": {
                "advanced": true,
                "display_name": "Namespace",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional namespace within Astra DB to use for the collection.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "namespace",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "number_of_results": {
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Number of results to return.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "number_of_results",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 4
              },
              "pre_delete_collection": {
                "advanced": true,
                "display_name": "Pre Delete Collection",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "pre_delete_collection",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "search_type": {
                "advanced": false,
                "display_name": "Search Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "search_type",
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Similarity"
              },
              "setup_mode": {
                "advanced": true,
                "display_name": "Setup Mode",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "setup_mode",
                "options": [
                  "Sync",
                  "Async",
                  "Off"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Sync"
              },
              "token": {
                "advanced": false,
                "display_name": "Token",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "ASTRA_DB_APPLICATION_TOKEN"
              }
            }
          },
          "type": "AstraDBSearch"
        },
        "dragging": false,
        "height": 713,
        "id": "AstraDBSearch-41nRz",
        "position": {
          "x": 1723.976434815103,
          "y": 277.03317407245913
        },
        "positionAbsolute": {
          "x": 1723.976434815103,
          "y": 277.03317407245913
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "AstraDB-eUCSS",
          "node": {
            "base_classes": [
              "VectorStore"
            ],
            "beta": false,
            "custom_fields": {
              "api_endpoint": null,
              "batch_size": null,
              "bulk_delete_concurrency": null,
              "bulk_insert_batch_concurrency": null,
              "bulk_insert_overwrite_concurrency": null,
              "collection_indexing_policy": null,
              "collection_name": null,
              "embedding": null,
              "inputs": null,
              "metadata_indexing_exclude": null,
              "metadata_indexing_include": null,
              "metric": null,
              "namespace": null,
              "pre_delete_collection": null,
              "setup_mode": null,
              "token": null
            },
            "description": "Builds or loads an Astra DB Vector Store.",
            "display_name": "Astra DB",
            "documentation": "",
            "field_formatters": {},
            "field_order": [
              "token",
              "api_endpoint",
              "collection_name",
              "inputs",
              "embedding"
            ],
            "frozen": false,
            "icon": "AstraDB",
            "output_types": [
              "VectorStore",
              "BaseRetriever"
            ],
            "template": {
              "_type": "CustomComponent",
              "api_endpoint": {
                "advanced": false,
                "display_name": "API Endpoint",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "API endpoint URL for the Astra DB service.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "api_endpoint",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "ASTRA_DB_API_ENDPOINT"
              },
              "batch_size": {
                "advanced": true,
                "display_name": "Batch Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional number of records to process in a single batch.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "batch_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_delete_concurrency": {
                "advanced": true,
                "display_name": "Bulk Delete Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk delete operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_delete_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_batch_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Batch Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_batch_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "bulk_insert_overwrite_concurrency": {
                "advanced": true,
                "display_name": "Bulk Insert Overwrite Concurrency",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional concurrency level for bulk insert operations that overwrite existing records.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "bulk_insert_overwrite_concurrency",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List, Optional, Union\n\nfrom langflow.custom import CustomComponent\nfrom langflow.field_typing import Embeddings, VectorStore\nfrom langflow.schema import Record\nfrom langchain_core.retrievers import BaseRetriever\n\n\nclass AstraDBVectorStoreComponent(CustomComponent):\n    display_name = \"Astra DB\"\n    description = \"Builds or loads an Astra DB Vector Store.\"\n    icon = \"AstraDB\"\n    field_order = [\"token\", \"api_endpoint\", \"collection_name\", \"inputs\", \"embedding\"]\n\n    def build_config(self):\n        return {\n            \"inputs\": {\n                \"display_name\": \"Inputs\",\n                \"info\": \"Optional list of records to be processed and stored in the vector store.\",\n            },\n            \"embedding\": {\"display_name\": \"Embedding\", \"info\": \"Embedding to use\"},\n            \"collection_name\": {\n                \"display_name\": \"Collection Name\",\n                \"info\": \"The name of the collection within Astra DB where the vectors will be stored.\",\n            },\n            \"token\": {\n                \"display_name\": \"Token\",\n                \"info\": \"Authentication token for accessing Astra DB.\",\n                \"password\": True,\n            },\n            \"api_endpoint\": {\n                \"display_name\": \"API Endpoint\",\n                \"info\": \"API endpoint URL for the Astra DB service.\",\n            },\n            \"namespace\": {\n                \"display_name\": \"Namespace\",\n                \"info\": \"Optional namespace within Astra DB to use for the collection.\",\n                \"advanced\": True,\n            },\n            \"metric\": {\n                \"display_name\": \"Metric\",\n                \"info\": \"Optional distance metric for vector comparisons in the vector store.\",\n                \"advanced\": True,\n            },\n            \"batch_size\": {\n                \"display_name\": \"Batch Size\",\n                \"info\": \"Optional number of records to process in a single batch.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_batch_concurrency\": {\n                \"display_name\": \"Bulk Insert Batch Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations.\",\n                \"advanced\": True,\n            },\n            \"bulk_insert_overwrite_concurrency\": {\n                \"display_name\": \"Bulk Insert Overwrite Concurrency\",\n                \"info\": \"Optional concurrency level for bulk insert operations that overwrite existing records.\",\n                \"advanced\": True,\n            },\n            \"bulk_delete_concurrency\": {\n                \"display_name\": \"Bulk Delete Concurrency\",\n                \"info\": \"Optional concurrency level for bulk delete operations.\",\n                \"advanced\": True,\n            },\n            \"setup_mode\": {\n                \"display_name\": \"Setup Mode\",\n                \"info\": \"Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.\",\n                \"options\": [\"Sync\", \"Async\", \"Off\"],\n                \"advanced\": True,\n            },\n            \"pre_delete_collection\": {\n                \"display_name\": \"Pre Delete Collection\",\n                \"info\": \"Boolean flag to determine whether to delete the collection before creating a new one.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_include\": {\n                \"display_name\": \"Metadata Indexing Include\",\n                \"info\": \"Optional list of metadata fields to include in the indexing.\",\n                \"advanced\": True,\n            },\n            \"metadata_indexing_exclude\": {\n                \"display_name\": \"Metadata Indexing Exclude\",\n                \"info\": \"Optional list of metadata fields to exclude from the indexing.\",\n                \"advanced\": True,\n            },\n            \"collection_indexing_policy\": {\n                \"display_name\": \"Collection Indexing Policy\",\n                \"info\": \"Optional dictionary defining the indexing policy for the collection.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        token: str,\n        api_endpoint: str,\n        collection_name: str,\n        inputs: Optional[List[Record]] = None,\n        namespace: Optional[str] = None,\n        metric: Optional[str] = None,\n        batch_size: Optional[int] = None,\n        bulk_insert_batch_concurrency: Optional[int] = None,\n        bulk_insert_overwrite_concurrency: Optional[int] = None,\n        bulk_delete_concurrency: Optional[int] = None,\n        setup_mode: str = \"Sync\",\n        pre_delete_collection: bool = False,\n        metadata_indexing_include: Optional[List[str]] = None,\n        metadata_indexing_exclude: Optional[List[str]] = None,\n        collection_indexing_policy: Optional[dict] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        try:\n            from langchain_astradb import AstraDBVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError:\n            raise ImportError(\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n\n        try:\n            setup_mode_value = SetupMode[setup_mode.upper()]\n        except KeyError:\n            raise ValueError(f\"Invalid setup mode: {setup_mode}\")\n        if inputs:\n            documents = [_input.to_lc_document() for _input in inputs]\n\n            vector_store = AstraDBVectorStore.from_documents(\n                documents=documents,\n                embedding=embedding,\n                collection_name=collection_name,\n                token=token,\n                api_endpoint=api_endpoint,\n                namespace=namespace,\n                metric=metric,\n                batch_size=batch_size,\n                bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n                bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n                bulk_delete_concurrency=bulk_delete_concurrency,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=pre_delete_collection,\n                metadata_indexing_include=metadata_indexing_include,\n                metadata_indexing_exclude=metadata_indexing_exclude,\n                collection_indexing_policy=collection_indexing_policy,\n            )\n        else:\n            vector_store = AstraDBVectorStore(\n                embedding=embedding,\n                collection_name=collection_name,\n                token=token,\n                api_endpoint=api_endpoint,\n                namespace=namespace,\n                metric=metric,\n                batch_size=batch_size,\n                bulk_insert_batch_concurrency=bulk_insert_batch_concurrency,\n                bulk_insert_overwrite_concurrency=bulk_insert_overwrite_concurrency,\n                bulk_delete_concurrency=bulk_delete_concurrency,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=pre_delete_collection,\n                metadata_indexing_include=metadata_indexing_include,\n                metadata_indexing_exclude=metadata_indexing_exclude,\n                collection_indexing_policy=collection_indexing_policy,\n            )\n\n        return vector_store\n        return vector_store\n"
              },
              "collection_indexing_policy": {
                "advanced": true,
                "display_name": "Collection Indexing Policy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional dictionary defining the indexing policy for the collection.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_indexing_policy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "collection_name": {
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "The name of the collection within Astra DB where the vectors will be stored.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "collection_name",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "langflow"
              },
              "embedding": {
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Embedding to use",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "Embeddings"
              },
              "inputs": {
                "advanced": false,
                "display_name": "Inputs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of records to be processed and stored in the vector store.",
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "inputs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "Record"
              },
              "metadata_indexing_exclude": {
                "advanced": true,
                "display_name": "Metadata Indexing Exclude",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to exclude from the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_exclude",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metadata_indexing_include": {
                "advanced": true,
                "display_name": "Metadata Indexing Include",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional list of metadata fields to include in the indexing.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "metadata_indexing_include",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "metric": {
                "advanced": true,
                "display_name": "Metric",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional distance metric for vector comparisons in the vector store.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "metric",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "namespace": {
                "advanced": true,
                "display_name": "Namespace",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Optional namespace within Astra DB to use for the collection.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "namespace",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "pre_delete_collection": {
                "advanced": true,
                "display_name": "Pre Delete Collection",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "pre_delete_collection",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "setup_mode": {
                "advanced": true,
                "display_name": "Setup Mode",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Configuration mode for setting up the vector store, with options like “Sync”, “Async”, or “Off”.",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "setup_mode",
                "options": [
                  "Sync",
                  "Async",
                  "Off"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Sync"
              },
              "token": {
                "advanced": false,
                "display_name": "Token",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "Authentication token for accessing Astra DB.",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "token",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "ASTRA_DB_APPLICATION_TOKEN"
              }
            }
          },
          "type": "AstraDB"
        },
        "dragging": false,
        "height": 573,
        "id": "AstraDB-eUCSS",
        "position": {
          "x": 3372.04958055989,
          "y": 1611.0742035495277
        },
        "positionAbsolute": {
          "x": 3372.04958055989,
          "y": 1611.0742035495277
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      },
      {
        "data": {
          "id": "OpenAIEmbeddings-9TPjc",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "custom_fields": {
              "allowed_special": null,
              "chunk_size": null,
              "client": null,
              "default_headers": null,
              "default_query": null,
              "deployment": null,
              "disallowed_special": null,
              "embedding_ctx_length": null,
              "max_retries": null,
              "model": null,
              "model_kwargs": null,
              "openai_api_base": null,
              "openai_api_key": null,
              "openai_api_type": null,
              "openai_api_version": null,
              "openai_organization": null,
              "openai_proxy": null,
              "request_timeout": null,
              "show_progress_bar": null,
              "skip_empty": null,
              "tiktoken_enable": null,
              "tiktoken_model_name": null
            },
            "description": "Generate embeddings using OpenAI models.",
            "display_name": "OpenAI Embeddings",
            "documentation": "",
            "field_formatters": {},
            "field_order": [],
            "frozen": false,
            "output_types": [
              "Embeddings"
            ],
            "template": {
              "_type": "CustomComponent",
              "allowed_special": {
                "advanced": true,
                "display_name": "Allowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "allowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": []
              },
              "chunk_size": {
                "advanced": true,
                "display_name": "Chunk Size",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "chunk_size",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 1000
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Dict, List, Optional\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.custom import CustomComponent\nfrom langflow.field_typing import Embeddings, NestedDict\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\n                    \"text-embedding-3-small\",\n                    \"text-embedding-3-large\",\n                    \"text-embedding-ada-002\",\n                ],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"password\": True,\n                \"advanced\": True,\n            },\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\n                \"display_name\": \"OpenAI API Type\",\n                \"advanced\": True,\n                \"password\": True,\n            },\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\n                \"display_name\": \"TikToken Model Name\",\n                \"advanced\": True,\n            },\n            \"tiktoken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        openai_api_key: str,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        deployment: str = \"text-embedding-ada-002\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-ada-002\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Embeddings:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n"
              },
              "default_headers": {
                "advanced": true,
                "display_name": "Default Headers",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_headers",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict"
              },
              "default_query": {
                "advanced": true,
                "display_name": "Default Query",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "default_query",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "deployment": {
                "advanced": true,
                "display_name": "Deployment",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "deployment",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "disallowed_special": {
                "advanced": true,
                "display_name": "Disallowed Special",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "disallowed_special",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  "all"
                ]
              },
              "embedding_ctx_length": {
                "advanced": true,
                "display_name": "Embedding Context Length",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "embedding_ctx_length",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 8191
              },
              "max_retries": {
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "max_retries",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "int",
                "value": 6
              },
              "model": {
                "advanced": false,
                "display_name": "Model",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "model",
                "options": [
                  "text-embedding-3-small",
                  "text-embedding-3-large",
                  "text-embedding-ada-002"
                ],
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "text-embedding-ada-002"
              },
              "model_kwargs": {
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "model_kwargs",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "NestedDict",
                "value": {}
              },
              "openai_api_base": {
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_base",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_key": {
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": true,
                "multiline": false,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "openai_api_type": {
                "advanced": true,
                "display_name": "OpenAI API Type",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_type",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_api_version": {
                "advanced": true,
                "display_name": "OpenAI API Version",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_api_version",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_organization": {
                "advanced": true,
                "display_name": "OpenAI Organization",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_organization",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "openai_proxy": {
                "advanced": true,
                "display_name": "OpenAI Proxy",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "openai_proxy",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "request_timeout": {
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "request_timeout",
                "password": false,
                "placeholder": "",
                "rangeSpec": {
                  "max": 1,
                  "min": -1,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "type": "float"
              },
              "show_progress_bar": {
                "advanced": true,
                "display_name": "Show Progress Bar",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "show_progress_bar",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "skip_empty": {
                "advanced": true,
                "display_name": "Skip Empty",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "skip_empty",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": false
              },
              "tiktoken_enable": {
                "advanced": true,
                "display_name": "TikToken Enable",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_enable",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "bool",
                "value": true
              },
              "tiktoken_model_name": {
                "advanced": true,
                "display_name": "TikToken Model Name",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": false,
                "name": "tiktoken_model_name",
                "password": false,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              }
            }
          },
          "type": "OpenAIEmbeddings"
        },
        "dragging": false,
        "height": 383,
        "id": "OpenAIEmbeddings-9TPjc",
        "position": {
          "x": 2814.0402191223047,
          "y": 1955.9268168273086
        },
        "positionAbsolute": {
          "x": 2814.0402191223047,
          "y": 1955.9268168273086
        },
        "selected": false,
        "type": "genericNode",
        "width": 384
      }
    ],
    "viewport": {
      "x": -259.6782520315529,
      "y": 90.3428735006047,
      "zoom": 0.2687057134854984
    }
  },
  "description": "Visit https://pre-release.langflow.org/tutorials/rag-with-astradb for a detailed guide of this project.\nThis project give you both Ingestion and RAG in a single file. You'll need to visit https://astra.datastax.com/ to create an Astra DB instance, your Token and grab an API Endpoint.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the Astra DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data.",
  "id": "51e2b78a-199b-4054-9f32-e288eef6924c",
  "is_component": false,
  "last_tested_version": "1.0.0a0",
  "name": "Vector Store RAG"
}